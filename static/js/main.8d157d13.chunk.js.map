{"version":3,"sources":["components/todoItem.js","components/todoList.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","props","className","id","taskName","src","alt","onClick","handleClick","ToDoList","removeItem","setState","tasks","state","filter","task","class","this","map","name","React","Component","Header","children","App","path","exact","component","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAEaA,G,MAAW,SAAAC,GAItB,OACE,yBAAKC,UAAU,sBAAsBC,GAAIF,EAAME,IAC7C,yBAAKD,UAAU,wBACb,yBAAKA,UAAU,aACb,4BAAKD,EAAMG,WAEb,yBAAKC,IAAKJ,EAAMI,IAAKC,IAAKL,EAAMI,OAElC,yBAAKH,UAAU,kBACb,4BAAQK,QAASN,EAAMO,aAAvB,YCgEOC,E,YA5Eb,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KAqCRS,WAAa,SAAAP,GACX,EAAKQ,SAAS,CACZC,MAAO,EAAKC,MAAMD,MAAME,QAAO,SAAAC,GAAI,OAAIA,EAAKZ,KAAOA,QAtCrD,EAAKU,MAAQ,CACXD,MAAO,CACL,CACER,SAAU,qBACVC,IAAK,wDACLF,GAAI,GAEN,CACEC,SAAU,cACVC,IAAK,4DACLF,GAAI,GAEN,CACEC,SAAU,gBACVC,IAAK,wDACLF,GAAI,GAEN,CACEC,SAAU,cACVC,IAAK,6DACLF,GAAI,GAEN,CACEC,SAAU,aACVC,IAAK,6DACLF,GAAI,GAEN,CACEC,SAAU,qBACVC,IAAK,6DACLF,GAAI,KAhCO,E,sEAoDT,IAAD,OACP,OACE,yBAAKa,MAAM,WACT,wBAAId,UAAU,eAAd,2BACA,wBAAIA,UAAU,aACXe,KAAKJ,MAAMD,MAAMM,KAAI,SAAAH,GACpB,OACE,kBAAC,EAAD,CACEb,UAAU,YACVE,SAAUW,EAAKX,SACfC,IAAKU,EAAKV,IACVC,IAAKS,EAAKI,KACVX,YAAa,WACX,EAAKE,WAAWK,EAAKZ,gB,GAlEhBiB,IAAMC,WCAhBC,EAAS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvB,OAAO,4BAAQrB,UAAU,oBAAoBqB,I,eC0BhCC,E,iLAtBX,OACE,kBAAC,IAAD,KACE,yBAAKtB,UAAU,OACb,kBAAC,IAAD,CAAOuB,KAAK,IAAIC,OAAK,EAACC,UAAWL,GAC/B,kBAAC,EAAD,CAAQpB,UAAU,kBAChB,mDACA,yBACEG,IAAI,wDACJC,IAAI,qFAEN,kBAAC,IAAD,CAAMsB,GAAG,UAAT,WAGJ,kBAAC,IAAD,CAAOH,KAAK,SAASC,OAAK,EAACC,UAAWlB,GACpC,kBAAC,EAAD,a,GAhBMW,IAAMC,WCOJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8d157d13.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const ToDoItem = props => {\n  // const handleClick = () => {\n  //   alert(this);\n  // };\n  return (\n    <div className=\"task-item-container\" id={props.id}>\n      <div className=\"image-name-container\">\n        <div className=\"task-name\">\n          <h3>{props.taskName}</h3>\n        </div>\n        <img src={props.src} alt={props.src} />\n      </div>\n      <div className=\"item-container\">\n        <button onClick={props.handleClick}>Done</button>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { ToDoItem } from \"./todoItem\";\nclass ToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [\n        {\n          taskName: \"Go to the Washroom\",\n          src: \"https://media.giphy.com/media/CxqGa4O0LQewU/giphy.gif\",\n          id: 0\n        },\n        {\n          taskName: \"Get Dressed\",\n          src: \"https://media.giphy.com/media/26FLdaDQ5f72FPbEI/giphy.gif\",\n          id: 1\n        },\n        {\n          taskName: \"Eat Breakfast\",\n          src: \"https://media.giphy.com/media/IsSkJaiwBrQxW/giphy.gif\",\n          id: 3\n        },\n        {\n          taskName: \"Brush Teeth\",\n          src: \"https://media.giphy.com/media/xT9IgpwOQfx9WmFxN6/giphy.gif\",\n          id: 2\n        },\n        {\n          taskName: \"Style Hair\",\n          src: \"https://media.giphy.com/media/1gdx2WgBio0SbJoon5/giphy.gif\",\n          id: 4\n        },\n        {\n          taskName: \"Help with the Pets\",\n          src: \"https://media.giphy.com/media/3o7WItSnXGBtacU71C/giphy.gif\",\n          id: 5\n        }\n      ]\n    };\n  }\n\n  removeItem = id => {\n    this.setState({\n      tasks: this.state.tasks.filter(task => task.id !== id)\n    });\n  };\n\n  // deletePlayer = id => {\n  //   this.setState({\n  //     teamPlayers: this.state.teamPlayers.filter(\n  //       player => player.idTeam !== id,\n  //     ),\n  //   });\n  // };\n\n  render() {\n    return (\n      <div class=\"wrapper\">\n        <h1 className=\"task-header\">Avery's Morning Routine</h1>\n        <ul className=\"task-list\">\n          {this.state.tasks.map(task => {\n            return (\n              <ToDoItem\n                className=\"task-item\"\n                taskName={task.taskName}\n                src={task.src}\n                alt={task.name}\n                handleClick={() => {\n                  this.removeItem(task.id);\n                }}\n              />\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default ToDoList;\n","import React from \"react\";\n\nexport const Header = ({ children }) => {\n  return <header className=\"header-container\">{children}</header>;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport ToDoList from \"./components/todoList\";\nimport { Header } from \"./components/header\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route path=\"/\" exact component={Header}>\n            <Header className=\"home-container\">\n              <h1>Good Morning Avery!</h1>\n              <img\n                src=\"https://media.giphy.com/media/jDiUeDQpIkGIM/giphy.gif\"\n                alt=\"simba and mufasa looking out over their kingdom as the sun rises in the distance\"\n              />\n              <Link to=\"/tasks\">Tasks</Link>\n            </Header>\n          </Route>\n          <Route path=\"/tasks\" exact component={ToDoList}>\n            <ToDoList />\n          </Route>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}